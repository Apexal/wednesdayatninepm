---
import "shikwasa/dist/style.css";
import "leaflet/dist/leaflet.css";
import "src/styles/global.css";

import { CollectionEntry, getCollection } from "astro:content";
import GoogleFont from "src/layouts/GoogleFont.astro";
import FontAwesome from "src/layouts/FontAwesome.astro";
import ThemeScript from "src/layouts/ThemeScript.astro";
import Favicon from "src/layouts/Favicon.astro";
import Header from "src/components/Header.astro";
import Footer from "src/components/Footer.astro";

import { EPISODE_PREFACE, PODCAST_HOSTS, PODCAST_TAGLINE, PODCAST_TITLE } from "src/config";
import { getEpisodeAudioPath, getEpisodeCoverArtPath } from "src/lib/utils";

export async function getStaticPaths() {
  const episodeEntries = await getCollection("episodes", ({ data }) => {
    return data.draft !== true;
  });
  return episodeEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<"episodes">;
}

const {
  entry: { render, slug, data: episode },
} = Astro.props;
const { Content } = await render();

const formattedDate = new Date(episode.publishedAt).toLocaleString("en-us", {
  year: "numeric",
  month: "short",
  day: "numeric",
  timeZone: "UTC",
  hour: "numeric",
  minute: "2-digit",
});

const audioURL = getEpisodeAudioPath(slug);
const coverArtURL = getEpisodeCoverArtPath(slug);
---

<!DOCTYPE html>
<html class="theme-sleek" lang="en">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="generator" content="Blogster" />
    <Favicon />
    <title>
      {episode.title ? `${episode.title} | ${PODCAST_TITLE}` : PODCAST_TITLE}
    </title>
    <meta name="description" content={episode.tagline ?? PODCAST_TAGLINE} />
    <GoogleFont />
    <ThemeScript />
    <FontAwesome />
  </head>

  <body class="min-h-screen max-w-3xl mx-auto mb-36">
    <div class="mx-auto px-6 sm:px-8 w-full flex">
      <Header />
    </div>
    <main id="main">
      <section class="prose max-w-none prose-sleek sm:px-8">
        <div class="overflow-hidden py-10 px-6 sm:px-8 max-w-3xl flex items-center relative sm:rounded-lg">
          {
            coverArtURL && (
              <img
                class="absolute pointer-events-none top-0 left-0 -translate-y-1/4 w-full h-auto opacity-40"
                src={coverArtURL}
                alt="Cover art for the episode"
              />
            )
          }
          <div class="z-10 flex-1 sm:px-8">
            <h1 class="m-0 mb-[0.25em]">{episode.title}</h1>
            <time class="block sm:mb-[2em]">Episode {episode.episodeNumber} | {formattedDate}</time>

            <blockquote>
              <p>
                <strong>{EPISODE_PREFACE}</strong>
                <br>{" "}
                {episode.tagline}
              </p>
            </blockquote>
          </div>
          
        </div>
    </section>
    <section class="prose max-w-none prose-sleek px-6 sm:px-8">
        <astro-player
          class="z-10"
          data-title={episode.title}
          data-audio-url={audioURL}
          data-cover-art-url={coverArtURL}></astro-player>
        
        <Content />

        {
          episode.locations && (
            <div id="locations" class="mt-16">
              <h2>
                Discussed Locations
              </h2>
              {episode.locations.map((location, index) => (
                <div>
                  <h3>{location.name}</h3>
                  <astro-map
                    data-map-id={"map-" + index}
                    data-lat={location.lat}
                    data-long={location.long}
                  >
                    <div
                      id={"map-" + index}
                      class="w-full h-[500px] border-2 rounded-lg"
                    />
                  </astro-map>
                </div>
              ))}
            </div>
          )
        }

        
        <div id="participants" class="mt-16">
          <h2>In This Episode</h2>

          <ul>
            {(episode.hosts ?? PODCAST_HOSTS).map(name => <li>{name} <span class="text-text-muted">Host</span></li>)}  
            {episode.guests?.map(name => <li>{name} <span class="text-text-muted">Guest</span></li>)}  
          </ul>
        </div>
      

        {
          episode.sources && (
            <div id="sources" class="mt-16">
              <h2>Sources</h2>

              <ul>
                {episode.sources.map(url => <li><a target="_blank" href={url} class="break-all">{url}</a></li>)}  
              </ul>
            </div>
          )
        }
      </section>
    </main>
    <Footer />
    <style>
      body {
        display: grid;
        grid-template-areas:
          "header"
          "main"
          "footer";
        grid-template-rows: 5rem minmax(0, 1fr) 5rem;
        grid-template-columns: minmax(0, 1fr);
      }
      main {
        grid-area: main;
      }
    </style>
    <script>
      import L from "leaflet";
      import { Player } from "shikwasa";

      class AstroPlayer extends HTMLElement {
        constructor() {
          super();
          // Read the message from the data attribute.
          const title = this.dataset.title;
          const src = this.dataset.audioUrl;
          const cover = this.dataset.coverArtUrl;

          new Player({
            container: this,
            audio: {
              title,
              artist: "Wednesday at 9PM",
              cover,
              src,
            },
            fixed: {
              type: "fixed",
              position: "bottom",
            },
            themeColor: "rgb(var(--color-text-link))",
            download: true,
          });
        }
      }

      class AstroMap extends HTMLElement {
        constructor() {
          super();
          // Read the message from the data attribute.
          const { mapId, lat, long } = this.dataset;
          const map = L.map(mapId).setView([lat, long], 13);
          L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
            maxZoom: 19,
            attribution:
              '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
          }).addTo(map);
        }
      }

      customElements.define("astro-player", AstroPlayer);
      customElements.define("astro-map", AstroMap);
    </script>
  </body>
</html>
