---
import "shikwasa/dist/style.css";
import "leaflet/dist/leaflet.css";
import "src/styles/global.css";

import { CollectionEntry, getCollection } from "astro:content";
import GoogleFont from "src/layouts/GoogleFont.astro";
import FontAwesome from "src/layouts/FontAwesome.astro";
import ThemeScript from "src/layouts/ThemeScript.astro";
import Favicon from "src/layouts/Favicon.astro";
import Header from "src/components/Header.astro";
import Footer from "src/components/Footer.astro";

import {
  EPISODE_PREFACE,
  PODCAST_HOSTS,
  PODCAST_TAGLINE,
  PODCAST_TITLE,
  SITE_URL,
} from "src/podcast";
import {
  getEpisodeAudioURL,
  getEpisodeCoverArtPath,
  getEpisodeImagesPath,
  getEpisodePagePath,
  markdownLinkRegex,
  parseTitle,
} from "src/lib/utils";
import Person from "src/components/Person.astro";
import Source from "src/components/Source.astro";

export async function getStaticPaths() {
  const episodeEntries = await getCollection("episodes", ({ data }) => {
    return data.draft !== true;
  });
  return episodeEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<"episodes">;
}

const {
  entry: { render, slug, data: episode },
} = Astro.props;

const { Content } = await render();

const formattedDate = new Date(episode.publishedAt).toLocaleString("en-us", {
  year: "numeric",
  month: "short",
  day: "numeric",
  timeZone: "UTC",
  hour: "numeric",
  minute: "2-digit",
});

const audioURL = getEpisodeAudioURL(slug);
const coverArtURL = getEpisodeCoverArtPath(slug);

// Fetch all sources in parallel instead of in order to speed up rendering
const sources = episode.sources
  ? await Promise.all(
      episode.sources.map(async (line) => {
        let title = null;
        let url = line;

        const match = line.match(markdownLinkRegex);

        if (match) {
          url = match[2]!;
          title = match[1]!;
        }

        // If markdown link with page title, we don't have to fetch the URL for the title
        if (title && title.endsWith(".pdf")) {
          const path = title.split("/");
          title = `${path[path.length - 1]} (PDF)`;
        } else if (!title || title === url) {
          try {
            const response = await fetch(url);
            title = parseTitle(await response.text());
          } catch (e) {
            console.error(`Failed to fetch page for <title>: ${url}\n${e}`);
            
          }
        }

        return {
          title,
          url,
        };
      })
    )
  : [];
---

<!DOCTYPE html>
<html class="theme-sleek dark" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="generator" content="Blogster" />
    <Favicon />
    <title>
      {episode.title ? `${episode.title} | ${PODCAST_TITLE}` : PODCAST_TITLE}
    </title>
    <meta name="description" content={episode.tagline ?? PODCAST_TAGLINE} />
    <meta
      property="og:image"
      content={SITE_URL + getEpisodePagePath(slug) + ".jpg"}
    />
    <meta
      property="og:image:secure_url"
      content={SITE_URL + getEpisodePagePath(slug) + ".jpg"}
    />
    <meta property="og:image:width" content="512" />
    <meta property="og:image:height" content="512" />
    <GoogleFont />
    <ThemeScript />
    <FontAwesome />
    {import.meta.env.MODE === "production" && (
      <script>
        !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
        posthog.init('phc_QbNygePuvId1KxjWBDyAWLJqSfe4GV5JhfOujZ2km8Y',{api_host:'https://app.posthog.com'})
      </script>
    )}
  </head>

  <body class="min-h-screen max-w-3xl mx-auto mb-36">
    <div class="mx-auto px-6 sm:px-8 w-full flex">
      <Header />
    </div>
    <main id="main">
      <section class="prose max-w-none prose-sleek sm:px-8">
        <div
          class="overflow-hidden py-10 px-6 sm:px-8 max-w-3xl flex items-center relative sm:rounded-lg"
        >
          {
            coverArtURL && (
              <img
                class="absolute pointer-events-none left-0 w-full opacity-40 object-cover"
                src={coverArtURL}
                alt="Cover art for the episode"
              />
            )
          }
          <div class="z-10 flex-1 sm:px-8">
            <h1 class="m-0 mb-[0.25em]">{episode.title}</h1>
            <time class="block sm:mb-[2em]"
              >Episode {episode.episodeNumber} | {formattedDate}</time
            >

            <blockquote>
              <p>
                <strong>{EPISODE_PREFACE}</strong>
                <br />{" "}
                {episode.tagline}
              </p>
            </blockquote>
          </div>
        </div>
      </section>
      <section class="prose prose-sleek max-w-none px-6 sm:px-8">
        <astro-player
          class="z-10"
          data-title={episode.title}
          data-audio-url={audioURL}
          data-cover-art-url={coverArtURL}
          data-episode={slug}></astro-player>

        <Content />

        {
          episode.images && (
            <div id="images" class="mt-16">
              <h2>Photographs</h2>
              {episode.images.map((img, imgIndex) => (
                <figure class="rounded-lg bg-black text-center">
                  <img
                    class="rounded-tl-lg rounded-tr-lg w-full"
                    src={getEpisodeImagesPath(slug) + img.fileName}
                    alt={img.fileName}
                  />
                  <figcaption class="text-white px-2 pb-2">
                    <strong>Figure {imgIndex + 1}:</strong>
                    {img.description}
                  </figcaption>
                </figure>
              ))}
            </div>
          )
        }

        {
          episode.locations && (
            <div id="locations" class="mt-16">
              <h2>Discussed Locations</h2>
              {episode.locations.map((location, index) => (
                <div>
                  <h3>{location.name}</h3>
                  <astro-map
                    data-map-id={"map-" + index}
                    data-lat={location.lat}
                    data-long={location.long}
                  >
                    <div
                      id={"map-" + index}
                      class="w-full h-[500px] border-2 rounded-lg"
                    />
                  </astro-map>
                </div>
              ))}
            </div>
          )
        }

        <div id="participants" class="mt-16">
          <h2>In This Episode</h2>

          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-2">
            {
              (episode.hosts ?? PODCAST_HOSTS).map((name) => (
                <Person nickname={name} role="Host" />
              ))
            }
            {
              (episode.cohosts ?? []).map((name) => (
                <Person nickname={name} role="Co-Host" />
              ))
            }
            {
              episode.guests?.map((name) => (
                <Person nickname={name} role="Guest" />
              ))
            }
          </div>
        </div>

        {
          sources.length > 0 && (
            <div id="sources" class="mt-16">
              <h2>Sources</h2>
              <ol>
                {sources.map((source) => (
                  <Source title={source.title} url={source.url} />
                ))}
              </ol>
            </div>
          )
        }

        <div id="feedback" class="mt-16">
          <h2>What Do You Think?</h2>

          <form name={`episode-${slug}-feedback`} class="space-y-5" netlify>
            <div>
              <label for="name" class="block">Your Name</label>
              <input
                id="name"
                type="text"
                name="name"
                class="rounded-md bg-slate-600 px-1"
                required
              />
            </div>
            <div>
              <label for="feedback" class="block">Your Episode Feedback</label>
              <textarea
                name="feedback"
                id="feedback"
                class="min-w-full w-full min-h-[3rem] max-h-60 rounded-md bg-slate-600 px-1"
                rows="10"
                required></textarea>
            </div>
            <button
              type="submit"
              class="bg-primary-main px-8 py-2 rounded-lg text-gray-800"
              >Submit</button
            >
          </form>
        </div>
      </section>
    </main>
    <Footer />
    <style>
      body {
        display: grid;
        grid-template-areas:
          "header"
          "main"
          "footer";
        grid-template-rows: 5rem minmax(0, 1fr) 5rem;
        grid-template-columns: minmax(0, 1fr);
      }
      main {
        grid-area: main;
      }
    </style>
    <script>
      import L from "leaflet";
      import { Player } from "shikwasa";

      class AstroPlayer extends HTMLElement {
        constructor() {
          super();
          // Read the message from the data attribute.
          const title = this.dataset.title;
          const src = this.dataset.audioUrl;
          const cover = this.dataset.coverArtUrl;
          const episodeSlug = this.dataset.episode;

          const player = new Player({
            container: this,
            audio: {
              title,
              artist: "Wednesday at 9PM",
              cover,
              src,
            },
            fixed: {
              type: "fixed",
              position: "bottom",
            },
            themeColor: "rgb(var(--color-text-link))",
            download: true,
          });

          player.on("play", () => {
            if (posthog) {
              posthog.capture('user_played_episode', {
                episode: episodeSlug,
              });
            }
          });
        }
      }

      class AstroMap extends HTMLElement {
        constructor() {
          super();
          // Read the message from the data attribute.
          const { mapId, lat, long } = this.dataset;
          const map = L.map(mapId).setView([lat, long], 17);
          L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
            maxZoom: 19,
            attribution:
              '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
          }).addTo(map);
        }
      }

      customElements.define("astro-player", AstroPlayer);
      customElements.define("astro-map", AstroMap);
    </script>
  </body>
</html>
